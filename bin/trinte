#!/usr/bin/env node

/**
 * TrinteJS MVC Bootstrap
 * @Params - cmd - server | script | params
 */


/**
 * Framework version.
 */

var version = '0.0.4';

/**
 * Explicit module dependencies
 */
var fs = require('fs'),
wrench = require('wrench'),
nodepath = require('path'),
exec = require('child_process').exec,
inflection = require('../lib/inflection');

/**
 * Paths
 **/
var path = fs.realpathSync('.').replace(/\\/gi, "/");
var bootstrapPath = __dirname.replace(/\\/gi, "/").replace(/\/bin/gi, "");
var args = process.argv.slice(2);
var command = args.shift();

/**
 * Main Command router
 */
var appLauncher = {
    command: command || 'cluster',
    server: { port: 3000 },
    script: { name: 'help',
        params: []
    }
};

for (var i in process.argv) {
    // Skip the first two - Node and app.js path
    if (i > 1) {
        processParam(process.argv[i], i);
    }
}

runLauncher(appLauncher);

/**
 * Run the launcher
 * @param appLauncher
 */
function runLauncher(appLauncher) {

    // Always use current directory?
    console.log('\r\n   \u001b[34mLaunching trinte from: \x1b[0m ' + path);
    console.log('   \u001b[34mScript directory: \x1b[0m ' + bootstrapPath + '/scripts');

    // Check if this is a bootstrap application?
    if (isLibrary()) {
        console.log('   \033[31mDo not run this from the bootstrap library folder, please run from an empty directory or a bootstrapped app, or please run "npm install"\x1b[0m\r\n');
        return;
    }

    // Check if this is a bootstrap application?
    if (!isBootstrap() && appLauncher.command !== 'create-app' && appLauncher.command !== 'init') {
        console.log('   \033[31mApplication not bootstrapped - you must run:\x1b[0m trinte create-app\r\n');
        return;
    }

    switch (appLauncher.command) {
        case 'test':
            runTests(appLauncher.script);
            break;
        case 'cluster':
        case 'c':
            runCluster(appLauncher.server.port);
            break;
        case 'server':
        case 's':
            runServer(appLauncher.server.port);
            break;
        case 'script':
        case 'g':
            runScript(appLauncher.script);
            break;
        case 'create-app':
        case 'init':
            appLauncher.appname = args.shift();
            if(typeof appLauncher.appname !== 'undefined') {
                createApplication(path,appLauncher.appname);
                console.log('   \x1b[1mCreate Application ' + appLauncher.appname + ': \x1b[0m ' + path + '/' + appLauncher.appname);
            } else {
                console.log('   \033[31mApplication Name not specified - you must run:\x1b[0m trinte create-app AppName\r\n');
                return;
            }
            break;
        default:
            appLauncher.command = 'script';
            runScript(appLauncher.script);
    }

}

/**
 * Check if express app.js exists
 **/
function isLibrary() {
    return fs.existsSync(path + '/bin/trinte');
}

/**
 * Check if .bootstrap exists
 **/
function isBootstrap() {
    return fs.existsSync(path + '/.trinte-status');
}

/**
 * Run a script
 * @param scriptLauncher
 * Runs by default from path where bootstrap runs via __dirname.
 */
function runScript(scriptLauncher) {

    var script_name = "";

    switch(scriptLauncher.name) {
           case "controller":
           case "model":
           case "view":
             script_name = "create-" + scriptLauncher.name;
             break;
           case "crud":
             script_name = "generate-all";
             break;
           default:
           script_name = scriptLauncher.name;
    }

    try {
        var script = require(bootstrapPath + '/scripts/' + script_name);
    } catch(err) {
        console.log("You must specifiy a correct script name!" + script_name);
        return;
    }

    var params = scriptLauncher.params, options = {};
    options.action = script_name.replace("create-","");

    if(params.length === 0 ) {
        console.log("You must specifiy a name to generate the scripts against!");
        return;
    }

    var tmpName = params[0];
    var tmpTpl = tmpName.split(':');
    var tmpNs = tmpTpl[0].split('#');

    if(typeof tmpNs[1] !== 'undefined') {
        options.namespace = tmpNs[0];
        options.model = tmpNs[1];
    } else {
        options.model = tmpTpl[0];
    }

    if(typeof tmpTpl[1] !== 'undefined') {
        options.anyside = tmpTpl[1];
    }
    options.bootstrapPath = bootstrapPath;
    script.execute(params.slice(1), path, options);
}

/**
 * Process params into array to enable launch
 * @param param
 * @param depth
 */
function processParam(param, depth) {

    var paramArray = param.split("=");

    // Run command - must always come after the app
    if (parseInt(i) === 2) {
        appLauncher.command = param;
    }

    // Server.port
    if (paramArray[0] === "port" && paramArray[1] !== undefined) {
        appLauncher.server.port = paramArray[1];
    }

    //
    if ((appLauncher.command === "g" || appLauncher.command === "script" || appLauncher.command === "test") && parseInt(i) === 3) {
        appLauncher.script.name = param;console.log(param);
    }

    // Script params
    if ((appLauncher.command === 'g' || appLauncher.command === 'script') && parseInt(i) > 3) {
        appLauncher.script.params.push(param);
    }
}

/**
 * Run expresso tests
 * @param appLauncher
 */
function runTests(appLauncher) {

    var test = appLauncher.name ? appLauncher.name : 'all';

    if (test === 'help') {  // This is the default - ugly I know!
        test = ['unit', 'integration', 'functional'];
    } else {
        test = [test];
    }

    test.forEach(function (item, index) {
        exec('expresso -I . -s tests/' + item + ' ', { timeout: 60000, cwd: path }, function (error, stdout, stderr) {
            console.log("Finished test: " + item);
            console.log(stdout);
            console.log(stderr);
        });
    });
}

/**
 * Launch a server
 * @param port
 */
function runServer(port) {
    // Ensure we run in the local folder of the application
    process.chdir(path);
    var app = require(path + '/app').boot();
    app.listen(port);
    console.log('\r\n\x1b[36mApplication started on port:\x1b[0m ' + port);
}

/**
 * Launch a cluster
 * @param port
 */
function runCluster(port) {
    // Ensure we run in the local folder of the application
    process.chdir(path);
    require(path + '/app-cluster').boot(port, path);
    console.log('\r\n\x1b[36mLaunching cluster mode on port: \x1b[0m' + port);
}

/**
 * Application Creation - Borrowed from Express scripts
 **/

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 * @param {String} appname
 */
function createApplicationAt(path, appname) {
    var appdir = path + '/' + appname;

    wrench.mkdirSyncRecursive(appdir + '/app/models',755);
    wrench.mkdirSyncRecursive(appdir + '/app/controllers',755);
    wrench.mkdirSyncRecursive(appdir + '/app/views',755);
    wrench.mkdirSyncRecursive(appdir + '/app/helpers',755);
    wrench.mkdirSyncRecursive(appdir + '/app/lib',755);

    wrench.copyDirSyncRecursive(bootstrapPath + '/app', appdir);
    console.log('   \x1b[36mCopied\x1b[0m : ' + bootstrapPath + '/app to ' + appdir + '/');
    wrench.copyDirSyncRecursive(bootstrapPath + '/public', appdir + '/public');
    console.log('   \x1b[36mCopied\x1b[0m : ' + bootstrapPath + '/public to ' + appdir + '/public');
    wrench.copyDirSyncRecursive(bootstrapPath + '/tests', appdir + '/tests');
    console.log('   \x1b[36mCopied\x1b[0m : ' + bootstrapPath + '/tests to ' + appdir + '/tests');

    copy(bootstrapPath + '/lib/inflection.js', appdir + '/tools/inflection.js');
    copy(bootstrapPath + '/app-cluster.js', appdir + '/app-cluster.js');
    copy(bootstrapPath + '/app.js', appdir + '/app.js');

    var layout = fs.readFileSync(bootstrapPath + '/app/app/views/default_layout.ejs', 'utf-8');
    write(appdir + '/app/views/default_layout.ejs', layout.toString().replace(/APPNAME/gi, appname));

    var jpackage = fs.readFileSync(bootstrapPath + '/app.json', 'utf-8');
    write(appdir + '/package.json', jpackage.toString().replace(/APPNAME/gi,appname));

    write(appdir + '/.trinte-status', 'Created @ ' + new Date());
    console.log('   \x1b[1mApplication created! \x1b[0m ');
    console.log('   \x1b[1mNext step install dependencies: \r\n   cd ' + appdir + ' && npm -l install\x1b[0m ');
}

function createApplication(path,appname) {
    emptyDirectory(path + '/' + appname, function (empty) {
        if (empty) {
            createApplicationAt(path,appname);
        } else {
            confirm('\r\n   This will over-write the existing application, \x1b[1mcontinue (y/n)? \x1b[0m', function (ok) {
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(path,appname);
                } else {
                    abort('Aborting');
                }
            });
        }
    });
};

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' !== err.code) console.log(err);// throw err;
        fn(!files || !files.length);
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
    fs.writeFileSync(path, str, "utf8");
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
    prompt(msg, function (val) {
        fn(/^ *y(es)?/i.test(val));
    });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
    // prompt
    if (' ' === msg[msg.length - 1]) {
        process.stdout.write(msg);
    } else {
        console.log(msg);
    }

    // stdin
    process.stdin.setEncoding('ascii');
    process.stdin.once('data',function (data) {
        fn(data);
    }).resume();
}

/**
 * Mkdir
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    fs.mkdir(path, 755, function (err) {
        if (err) {
            console.log(err);
        }
        console.log('   \x1b[36mcreate\x1b[0m : ' + path);
        fn && fn();
    });
}

/**
 * Copy
 * @param {String} from
 * @param {String} to
 * @param {Function} fn
 */

function copy(from, to, fn) {
    var stat = fs.statSync(from);
    if (stat.isDirectory()) {
        var files = fs.readdirSync(from), count = 1;
        files.forEach(function (file) {
            fs.createReadStream(from + '/' + file).pipe(fs.createWriteStream(to + '/' + file));
            if (files.length === count) {
                console.log('   \x1b[36mCopied\x1b[0m : ' + from + ' to ' + to);
                fn && fn();
            }
            count++;
        });
    } else if (stat.isFile()) {
        fs.createReadStream(from).pipe(fs.createWriteStream(to));
        console.log('   \x1b[36mCopied\x1b[0m : ' + from + ' to ' + to);
        fn && fn();
    }
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
    console.error('   \033[31m' + str + '\x1b[0m');
    process.exit(1);
}